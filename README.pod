=encoding utf8

=for HTML <a href="https://travis-ci.org/zoffixznet/perl6-Color"><img src="https://travis-ci.org/zoffixznet/perl6-Color.svg?branch=master"></a>

=head1 NAME

Color - Format conversion, manipulation, and math operations on colours

=head1 SYNOPSIS

    use Color;
    my $white        = Color.new(255, 255, 255);
    my $almost_black = Color.new('#111');
    say Color.new(:hsv<152 80 50>).hex; # convert HSV to HEX

    my $lighter_pink = Color.new('#ED60A2').lighten(20);
    my $lighter_pink = Color.new('#ED60A2') ‚óê 20; # same as above

    my $saturated_pink = Color.new('#ED60A2').saturate(20);
    my $saturated_pink = Color.new('#ED60A2') üûâ 20; # same as above

    # Create an inverted colour scheme:
    $_ = .invert for @colours_in_my_colourscheme;

    use Color::Operators; # this gives us some ops to use on Color objects
    my $gray = $white / 2;
    say $gray.hex; # prints "#808080"
    say $almost_black + 25; # prints "42, 42, 42"

=head1 DESCRIPTION

This module allows you to perform mathematical operations on RGB colour tuples,
as well as convert them into other colour formats, like hex, and manipulate
them by, for example, making them lighter, darker, or more or less saturated.

=head1 OPERATORS

    use Color;
    use Color::Operators;

Note: as of this writing (Nov 17, 2015), merely importing the operators
made Rakudo compile 20 seconds slower, hence the operators are in a
separate module that you'll need to import.

=head1 CONSTRUCTOR

=head2 C<new>

    my $rgb = Color.new('abc');
    Color.new('#abc');
    Color.new('face');
    Color.new('#face');
    Color.new('abcdef');
    Color.new('#abcdef');
    Color.new('abcdefaa');
    Color.new('#abcdefaa');
    Color.new(:hex<abc>); # same applies to all other hex varians
    Color.new( 255, 100, 25 ); # RGB
    Color.new( .5, .1, .3, .4 ); # CMYK
    Color.new( rgb => [ 255, 100, 25 ] );
    Color.new(:rgb<255 100 25>); # same works on other formats
    Color.new( rgbd => [.086, .165, .282] ); # decimal RGB
    Color.new( rgba => [ 22, 42, 72, 88 ] );
    Color.new( rgbad => [ .086, .165, .282, .345 ] );
    Color.new( cmyk => [.55, .25, .85, .12] );
    Color.new( hsl => [ 72, 78, 65] );
    Color.new( hsv => [ 90, 60, 70] );

Creates new C<Color> object. All of the above formats are supported.
B<Note:> internally, the color will be converted to RGBA, which might
incurr slight precision loss when converting from other formats.

=head1 ATTRIBUTES

=head2 C<alpha-math>

    my $c = Color.new('abc');
    $c.alpha-math = True;

    my $c = Color.new('abca');
    $c.alpha-math = False;

Boolean. Specifies whether operator math from C<Color::Operators> should affect
the alpha channel. Colours contructed from RGBA automatically get this
attribute set to C<True>, rest of formats have it set as C<False>.

=head1 METHODS

=head2 C<cmyk>

    say $c.cmyk; # (<106/111>, <17/111>, 0.0, <11/85>)

Converts the color to CMYK format and returns a list containing each color
(ranging `0`..`1`).

=head2 C<darken>

    say $c.darken(10).cmyk; # darken by 10%

Creates a new C<Color> object that is darkened by the percetange given as the
argument.

=head2 C<desaturate>

    say $c.desaturate(20).cmyk;

Creates a new C<Color> object that is desaturated by the percetange given as
the argument.

=head2 C<hex>

    say $c.hex; #  (0A BC DE);

Returns a list of 3 2-digit hex numbers representing the color.

hex
hex3
hex8
hsl
hsv
invert
lighten
rgb
rgba
rgbad
rgbd
saturate
to-string

=head1 REPOSITORY

Fork this module on GitHub:
L<https://github.com/zoffixznet/perl6-Color>

=head1 BUGS

To report bugs or request features, please use
L<https://github.com/zoffixznet/perl6-Color/issues>

=head1 AUTHOR

Zoffix Znet L<http://zoffix.com/>

=head1 LICENSE

You can use and distribute this module under the same terms as Perl 6
itself. See the C<LICENSE> file included in this distribution for complete
details.

=cut
